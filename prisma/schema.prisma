generator client {
  provider = "prisma-client-js"
  output   = "./generated/postgres"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL_POSTGRES")
  shadowDatabaseUrl = env("DATABASE_URL_SHADOW") // ajoute cette ligne
}

model User {
  id                        String               @id @default(uuid()) @db.Uuid
  nom                       String
  prenom                    String
  avatar                    String?
  bio                       String?
  username                  String               @unique
  email                     String               @unique
  password                  String
  role                      Role                 @default(APPRENANT)
  demandeRoleFormateur      Boolean              @default(false)
  etatDemande               String?              @default("EN_ATTENTE") // âœ… "EN_ATTENTE", "ACCEPTEE", "REFUSEE"
  motivationFormateur       String?
  experienceProfessionnelle String?
  cvUrl                     String?
  portfolioUrl              String?
  createdAt                 DateTime             @default(now())
  certificats               Certificat[]
  enrollments               Enrollment[]
  coursProgresses           CoursProgress[]
  commentaires              Commentaire[]
  tutorials                 Tutorial[]
  reponsesCommentaire       ReponseCommentaire[]
}

model Formation {
  id           Int        @id @default(autoincrement())
  nomFormation String
  description  String
  photo        String
  tutorials    Tutorial[]
}

model Tutorial {
  id              Int           @id @default(autoincrement())
  titreTuto       String
  descriptionTuto String
  photo           String
  userId          String?       @db.Uuid
  formationId     Int
  formation       Formation     @relation(fields: [formationId], references: [id])
  user            User?         @relation(fields: [userId], references: [id])
  cours           Cours[]
  certificats     Certificat[]
  enrollments     Enrollment[]
  commentaires    Commentaire[]
}

model Cours {
  id              Int             @id @default(autoincrement())
  titreCours      String
  content         String
  photo           String?
  videosUrl       String?
  ressources      Ressources[]
  tutorialId      Int
  tutorial        Tutorial        @relation(fields: [tutorialId], references: [id])
  coursProgresses CoursProgress[]
}

model Certificat {
  id            Int      @id @default(autoincrement())
  titre         String
  apprenantId   String   @db.Uuid
  tutorialId    Int
  dateObtention DateTime @default(now())
  user          User     @relation(fields: [apprenantId], references: [id])
  tutorial      Tutorial @relation(fields: [tutorialId], references: [id])
}

enum Role {
  ADMIN
  FORMATEUR
  APPRENANT
}

model Enrollment {
  id         Int      @id @default(autoincrement())
  userId     String   @db.Uuid
  tutorialId Int
  enrolledAt DateTime @default(now())
  progress   Int      @default(0)

  user     User     @relation(fields: [userId], references: [id])
  tutorial Tutorial @relation(fields: [tutorialId], references: [id])

  @@unique([userId, tutorialId])
}

model CoursProgress {
  id        Int      @id @default(autoincrement())
  userId    String   @db.Uuid
  coursId   Int
  completed Boolean  @default(false)
  viewedAt  DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  cours Cours @relation(fields: [coursId], references: [id])

  @@unique([userId, coursId])
}

model Commentaire {
  id         Int                  @id @default(autoincrement())
  contenu    String
  userId     String               @db.Uuid
  tutorialId Int
  createdAt  DateTime             @default(now())
  reponses   ReponseCommentaire[]

  user     User     @relation(fields: [userId], references: [id])
  tutorial Tutorial @relation(fields: [tutorialId], references: [id])
}

model Ressources {
  id            Int      @id @default(autoincrement())
  nomRessources String
  file          String
  coursId       Int
  uploadAt      DateTime @default(now())
  cours         Cours    @relation(fields: [coursId], references: [id])
}

model ReponseCommentaire {
  id            Int      @id @default(autoincrement())
  contenu       String
  userId        String   @db.Uuid
  commentaireId Int
  createdAt     DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id])
  commentaire Commentaire @relation(fields: [commentaireId], references: [id])
}
